// Copyright (c) IPython Development Team.
// Distributed under the terms of the Modified BSD License.

// Copyright (c) IPython Development Team.
// Distributed under the terms of the Modified BSD License.

require([    'jquery',
    'base/js/namespace',
    'base/js/dialog',
    'base/js/events',
    'base/js/page',
    'base/js/utils',
    'tree/js/notebooklist',
    'tree/js/clusterlist',
    'auth/js/loginwidget',
    'tree/js/main',
    // only loaded, not used:
], function(
    $,
    IPython,
    dialog,
    events,
    page,
    utils,
    config,
    contents_service,
    notebooklist,
    clusterlist,
    sesssionlist,
    kernellist,
    terminallist,
    newnotebook,
    loginwidget) {
    "use strict";
    
    
});

IPython.NotebookList.prototype.load_list = function () {
    var that = this;
    this.contents.list_contents(that.notebook_path).then(
        $.proxy(draw_notebook_list, this),
        function(error) {
            draw_notebook_list({content: []}, "Server error: " + error.message);
        }
    );
};

var draw_notebook_list = function (list, error_msg) {
    list.content.sort(function(a, b) {
        if (type_order[a['type']] < type_order[b['type']]) {
            return -1;
        }
        if (type_order[a['type']] > type_order[b['type']]) {
            return 1;
        }
        if (a['name'] < b['name']) {
            return -1;
        }
        if (a['name'] > b['name']) {
            return 1;
        }
        return 0;
    });
    var message = error_msg || 'Notebook list empty.';
    var item = null;
    var model = null;
    var len = list.content.length;
    this.clear_list();
    var n_uploads = this.element.children('.list_item').length;
    if (len === 0) {
        item = this.new_item(0);
        var span12 = item.children().first();
        span12.empty();
        span12.append($('<div style="margin:auto;text-align:center;color:grey"/>').text(message));
    }
    var path = this.notebook_path;
    var offset = n_uploads;
    if (path !== '') {
        item = this.new_item(offset);
        model = {
            type: 'directory',
            name: '..',
            path: utils.url_path_split(path)[0],
        };
        this.add_link(model, item);
        offset += 1;
    }
    for (var i=0; i<len; i++) {
        model = list.content[i];
        item = this.new_item(i+offset);
        this.add_link(model, item);
    }
    // Trigger an event when we've finished drawing the notebook list.
    events.trigger('draw_notebook_list.NotebookList');
};



